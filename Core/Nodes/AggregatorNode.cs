using Core.Exceptions;
using System;
using System.Collections.Generic;
using System.Linq;
using IDGenerator = Common.Singleton<Common.IdentityGenerator>;

namespace Core.Nodes
{
    public class AggregatorNode<T,C> : IIn<T>, IOut<C>, IIdentity
        where T : class 
        where C : class
    {
        private Action<T, C> _aggregator;
        private readonly string _nodeIdentity;
        protected List<IIn<C>> _children;
        protected List<Token<T>> _inTokens;
        protected Token<C> _aggregatorToken;

        public AggregatorNode(string name)
        {
            this.Id = IDGenerator.Instance.GetNewId();
            this._nodeIdentity = this.GetType() + "_" + this.Id;
            this._children = new List<IIn<C>>();
            this.Name = name;
            this._aggregator = (incomingPayload, aggregatorPayload) => { };
            this._inTokens = new List<Token<T>>();
        }

        public void SetAggregator(Action<T, C> aggregator)
        {
            this._aggregator = aggregator;
        }


        public void In(Token<T> token)
        {
            var incomingParentToken = token.GetParent<C>();
            if (null == this._aggregatorToken)
            {
                this._aggregatorToken = incomingParentToken;
            }

            if (this._aggregatorToken != incomingParentToken)
            {
                throw new WrongParentReferenceException(
                            $@"The incoming child token has a different parent token. 
                               The Aggregator node accepts only children generated by the same parent.
                               Current ParentIdentifier: {this._aggregatorToken.ToString()}, Incoming ParentIdintifier: {incomingParentToken.ToString()}", (IIdentity)this);
            }
            this._inTokens.Add(token);
        }

        protected virtual void Out()
        {
            this._inTokens.Clear();
            this._aggregatorToken = null;
        }

        public string Name { get; set; }

        public int Id { get; }

        public override string ToString()
        {
            return this.Name + "_" + this._nodeIdentity;
        }

        public virtual void AddChild(IIn<C> node)
        {
            if (this._children.Count > 0)
            {
                throw new NotSupportedException("This node accepts only one child, there is already one child added.");
            }
            this._children.Add(node);
        }

        public virtual List<ITicker> Tick()
        {
            var nextTickers = new List<ITicker>();
            foreach (var childToken in this._inTokens)
            {
                if (this._aggregatorToken.ParkChildToken<T>(childToken))
                {
                    this._aggregator(childToken.Payload, this._aggregatorToken.Payload);
                }
            }

            if (this._aggregatorToken.ChildrenNr == 0) //move next
            {
                this._children[0].In(this._aggregatorToken);
                this.Out();
                nextTickers.Add(this._children[0]);
            }
            else //hold on and wait all the kid-tokens to come
            {
                nextTickers.Add(this);
            }

            return nextTickers;
        }

        public IList<T> GetPayloads()
        {
            return this._inTokens.Select(t => t.Payload).ToList();
        }
    }
}
