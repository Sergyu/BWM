using Core.Exceptions;
using System;
using System.Collections.Generic;
using System.Text;

namespace Core.Nodes
{
    public class Token<T> where T : class
    {
        private Object _parent = null;
        private List<object> _children;

        public Token (T payload) : this(payload, null)
        {
        }

        private Token(T payload, Object parent)
        {
            this.Payload = payload;
            this._parent = parent;
            this._children = new List<object>();
        }

        public T Payload { get; private set; }

        public int ChildrenNr { get { return this._children.Count;  } }

        public Token<C> GetParent<C>() where C : class
        {
            return null == this._parent
                ? null
                : (Token<C>)this._parent;
        }

        /// <summary>
        /// Generates a Token with specified Payload type. Store child token reference to the current Token aswell the child token stores a reference to the current Token.
        /// </summary>
        /// <typeparam name="C">Child Payload Type</typeparam>
        /// <param name="payload">Payload object</param>
        /// <exception type="WrongChildPayloadTypeException">Thrown if specified Child Payload Type does not fit already generated children Token Payload Type</exception>
        /// <returns>Token object with specified payload in it</returns>
        public Token<C> NewChildToken<C>(C payload) where C : class
        {
            this.validateChildTokenType<C>();
            var childToken = new Token<C>(payload, this);
            this._children.Add(childToken);
            return childToken;
        }

        /// <summary>
        /// Removes a child Token<C> from Parent Token
        /// </summary>
        /// <typeparam name="C">Child Payload Type</typeparam>
        /// <param name="child">Child Token</param>
        /// <exception type="WrongChildPayloadTypeException">Thrown if specified Child Payload Type does not fit this children Payload Type</exception>
        /// <returns>true if the required child token was generated by this Token</returns>
        public bool ParkChildToken<C>(Token<C> child) where C : class
        {
            validateChildTokenType<C>();
            return this._children.Remove(child);
        }

        private void validateChildTokenType<C>() where C : class
        {
            if (this._children.Count == 0) return;
            var kid = this._children[0] as Token<C>;
            if (null == kid)
            {
                throw new WrongChildPayloadTypeException(
                    $@"The Child Payload Type<C>:{typeof(C).FullName} is not stored by the current Token. 
                      Current Token Child Payload Type is: {this._children[0].GetType().FullName}.");
            }

        }

    }
}
